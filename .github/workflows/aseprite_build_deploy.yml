name: Build and Deploy Aseprite

on:
  push:
    branches:
      - master

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check Latest Aseprite Release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Get Latest Version Info
        id: version_info
        run: |
          data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
          LATEST_TAG=$(echo "$data" | jq -r '.tag_name')
          DOWNLOAD_URL=$(echo "$data" | jq -r '.assets[0].browser_download_url')
          VERSION_INFO=$(echo "$data" | jq -r '.body')

          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "version_info<<EOF" >> $GITHUB_OUTPUT
          echo "$VERSION_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check Version Cache
        id: version_check
        uses: actions/cache@v3
        with:
          path: version_info_cache/${{ steps.version_info.outputs.latest_tag }}.txt
          key: version-${{ steps.version_info.outputs.latest_tag }}

      - name: Decide Whether to Build
        id: should_build
        run: |
          if [ -f "version_info_cache/${{ steps.version_info.outputs.latest_tag }}.txt" ]; then
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            mkdir -p version_info_cache
            echo "${{ steps.version_info.outputs.latest_tag }}" > version_info_cache/${{ steps.version_info.outputs.latest_tag }}.txt
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Release (Draft)
        id: create_release
        if: steps.should_build.outputs.should_build == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version_info.outputs.latest_tag }}
          name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
          body: ${{ steps.version_info.outputs.version_info }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y cmake ninja-build libxcursor-dev libxi-dev libgl1-mesa-dev

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake ninja p7zip

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        uses: seanmiddleditch/gha-setup-ninja@v1

      - name: Setup Visual Studio Env (Windows)
        if: runner.os == 'Windows'
        uses: seanmiddleditch/gha-setup-vsdevenv@v1

      - name: Cache Skia
        id: skia-cache
        uses: actions/cache@v3
        with:
          path: skia
          key: skia-${{ runner.os }}-cache

      - name: Download Skia (if missing)
        if: steps.skia-cache.outputs.cache-hit != 'true'
        run: |
          curl -L -o Skia-${{ runner.os }}.zip https://github.com/aseprite/skia/releases/download/m81-b607b32047/Skia-${{ runner.os }}-Release-x64.zip
          unzip Skia-${{ runner.os }}.zip -d skia

      - name: Download Aseprite Source
        run: |
          curl -L -o Aseprite.zip ${{ needs.check-version.outputs.download_url }}
          unzip Aseprite.zip -d aseprite
          mkdir -p aseprite/build

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 -G Ninja ..

      - name: Configure CMake (macOS)
        if: runner.os == 'macOS'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 -G Ninja ..

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        working-directory: aseprite/build
        shell: cmd
        run: cmake -DCMAKE_BUILD_TYPE=%BUILD_TYPE% -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 -G Ninja ..

      - name: Build Aseprite
        working-directory: aseprite/build
        run: ninja aseprite

      - name: Clean Temporary Files
        working-directory: aseprite/build/bin
        run: |
          rm -f gen modp_b64_gen *.exe *.manifest || true

      - name: Create Portable Config (Windows)
        if: runner.os == 'Windows'
        working-directory: aseprite/build/bin
        run: echo "# Aseprite portable mode" > aseprite.ini

      - name: Package Binary
        working-directory: aseprite/build/bin
        run: 7z a Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip *

      - name: Upload Binary to Release
        uses: softprops/action-gh-release@v1
        with:
          files: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
